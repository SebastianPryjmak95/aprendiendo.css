
@import url(otra-hoja.css);

h1{
    color:orangered;
    background-color: black;
}

/*Selectores Basicos
    1) Etiquetas-Son elementos HTML.
    2) Identificadores - atributo id - #
    3) Clases - atributo Class - .
*/

/*p{color: green;} /*Al aplicar un estilo directo a la etiqueta afectara a esas etiquetas del documento*/


/*Dar estilos con id se considera un Antipatron(Mala practica) por que se necesita reutilizar codigo*/
#parrafo-dos{background-color: skyblue;}

/*Dar estilos con clases nos permite utilizar nuestro codigo CSS*/
.bg-skyblue{background-color: skyblue;}
.bg-steelblue{background-color:steelblue;}

.text-20{font-size: 20px;}
.text-32{font-size: 32px;}
.text-white{color: white;}

/*El selector de hijos directos afecta a los de primer nivel*/
.hijos-directos> b {
    background-color: thistle;
}

/* */
.hijos-descendientes b{
    background-color: thistle;
}
/*los selectores de hermanos van a aplicar a los elementos que son hermanos y que esten por debajo del elemento de referencia*/
.hermanos-general ~ li{ /*~ es el selector del hermanos general*/
    background-color: thistle;
}

.hermanos-adyacentes + li{ /*+ es el selector de hermanos adyacentes*/
    background-color: thistle;
}


/*Selectores de Atributos -> se coloca entre corchetes a los atributos afectados.*/
.selectores-atributos a[href]{
color: orangered;
}

.selectores-atributos a[target="_blank"]{
    font-weight:bold;
}

/*El comodin del * aplica  el estilo si contiene el texto en cuestion en cualquier parte*/
.selectores-atributos a[href*="jonmircha"]{
    font-size:24px;
}

/*El comodin del ^ aplica el estilo el texto en cuestion al inicio*/
.selectores-atributos a[href^="http://"]{
    text-decoration:none;
}


/*El comodin del $ aplica el estilo el texto en cuestion al final*/
.selectores-atributos a[href$=".com"]{
    background-color: black;
}

/*El comodin del ~ aplica el estilo si contiene el texto en cuestion en una lista separada por espacio */
.selectores-atributos a[class~="cursos"]{
    background-color: slateblue;
}

/*El comodin del | aplica el estilo si contiene el texto en cuestion en una lista separada por espacio y que despues del texto en cuestion pueda venir un guion medio - */
.selectores-atributos a[class|="menu"]{
    font-style: italic;
}

/*Selector universal (*) */
/*Aplica los estilos a todo los elementos que tengas dentro  del documento html */
*{
    font-family: sans-serif;
}

.selector-universal *{
    font-size:24px;
}
/*
Pseudoclases-Dan estilos dependiendo del contexto,posici√≥n o estado de elemento.
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes
*/
/*en la clase form-pseudoclases con :required que tenga un borde amarillo el bloque de texto que necesita ser requerido*/
.form-pseudoclases *:required{
    border-color:yellow;
}
/* con el :valid hace que le haga un borde verde si es valido el dato requerido*/
.form-pseudoclases *:valid{
    border-color: green;
}
/* con el :invalid hace que le haga un borde rojo si es invalido el dato requerido*/
.form-pseudoclases *:invalid{
    border-color: red;
}
/* con el :focus hace que le haga un fondo celeste si cuando me posiciono en la casilla para escribir texto*/
.form-pseudoclases *:focus{
    background-color:skyblue;
}
/* con el :disable hace que el boton inabilitado tenga un color rosado*/
.form-pseudoclases *:disabled{
    background-color: pink;
}

/* con el :visited hace que al seleccionar el enlace cambie de color olive quitando el color morado determinado una vez visitado el enlace*/

/*IMPORTANTE: esta clase tiene que estar arriba del hover por que inhabilita la funcion del hover */
.menu-pseudoclases a:visited{
    color:olive;
}

/* con el :hover hace que al pasar el cursos cambie de color naranja*/
.menu-pseudoclases a:hover{
    color:orange;
}

.p-pseudoclases:hover{
    font-size: 20px;
}
/*cambio el fondo de color del temario con un id donde la direccion url perite activarlo*/
/* principio basico para hacer menus moviles sin necesidad de javascript*/

#temario-css:target{
    background-color:lightgreen;
}
/*Aplica al primer elemento de mi lista*/
.lista-pseudoclases li:first-child{
    color:limegreen;}

/*Aplica al ultimo elemento de mi lista*/
.lista-pseudoclases li:last-child{
color:violet
}

/*Aplica al tercer elemento de mi lista*/
.lista-pseudoclases li:nth-child(3){
    color:navy; 
    }

/*Aplica en 2 en 2 elemento de mi lista*/
.lista-pseudoclases li:nth-child(2n){
 color:red;
 font-size: 20px; 
 }

.lista-pseudoclases li:nth-child(3n+1){
    font-weight: bold;
    }
/*.lista-pseudoclases li:nth-child(even): aplica a los elementos li pares */
.lista-pseudoclases li:nth-child(even){
    background-color: yellow;
}
/*.lista-pseudoclases li:nth-child(odd): aplica a los elementos li inpares */
.lista-pseudoclases li:nth-child(odd){
    background-color: green;
}

/*.articulo-pseudoclases p:first-of-type => el fist-of-type hace que le aplique la clase al primer hijo del elemento p de la class:articulo-pseudoclase*/
.articulo-pseudoclases p:first-of-type{
    background-color: pink;
}
/*.articulo-pseudoclases p:last-of-type => el last-of-type hace que le aplique la clase al ultimo elemento *p* hijo  de la class:articulo-pseudoclase*/
.articulo-pseudoclases p:last-of-type{
    background-color: violet;
}
/*.articulo-pseudoclases p:nth-of-type(3) => el nth-of-type hace que le aplique la clase en la posicion requerida este caso al 3 elemento *p* hijo  de la class:articulo-pseudoclase*/
.articulo-pseudoclases p:nth-of-type(3){
    background-color: fuchsia;
}
/*.articulo-pseudoclases *:not(p) => el :not(p) permite obiar que siertos elementos hijos no se le aplique a la class .articulo-pseudoclases */
.articulo-pseudoclases *:not(p){
    background-color: beige;
}

/*Seguir con pseudoelemento seccion 15 tiempo 2:43:36 */

/*Aplica los estilos antes del elemento indicado en la class ".saga-geminis"*/
.saga-geminis::before{
    content:"ü§º‚Äç‚ôÇÔ∏è";
}
/*Aplica los estilos despues del elemento indicado class ".saga-geminis"*/
.saga-geminis::after{
    content:"‚ôä";
}
/*Aplica los estilos antes del elemento indicado en la class ".saga-precio"*/
.saga-precio::before{
    content:"$";
    font-weight: bold;
}
/*Aplica los estilos despues del elemento indicado class".saga-precio"*/
.saga-precio::after{
    content:"USD";
    font-weight: bold;
}
/*Aplica estilos a la primer letra del texto*/
.p-seudoelemento::first-letter{
    font-weight: bold;
    font-size: 32px;
}
/*Aplica estilos a la primer linea del texto*/
.p-seudoelemento::first-line{
    color: coral;
}
/*Aplica estilos cuando el usuario selecciona el parrafo*/
.p-seudoelemento::selection{
    color:greenyellow;
    background-color: black;
}
/*Aplica estilos al texto guia de una rectangulo de ingreso de datos.*/
.input-pseudoelemento::placeholder{
    color:green;
}

/*Agrupar selectores usamos la , */
.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea{
    border-color: yellow;
    border-width: 2px;
    border-style:dashed;
    background-color: black;
    font-size: 20px;
    display: block;
    width: 300px;
}


/*
El algoritmo de CSS: Es la Forma en que el navegador Aplica los estilos al documento
HTML. Es vital entender este concepto para que entiendas como se aplica y en algunas
ocasiones sobre sobreescriben las reglas CSS.

1) La Cascada.
    - El User Agent (Los estilos por defecto del navegador)
    - Personalizacion del usuario.
    - Los Estilos del Autor. 

2) La Especificadad Del Selector.
    Es el peso que tiene un selector cuando hay conflicto de estilos. Se calcula
    de la siguiente forma:

    Etiquetas y pseudoelementos --------------------------0,0,0,1
    Clases, Atributos y pseudoclases----------------------0,0,1,0
    Identificadores---------------------------------------0,1,0,0
    Estilos en linea--------------------------------------1,0,0,0
    !important-------------------------------Rompe la especifidad

3) La Herencia.
    es la capacidad de un selector de obtener (heredar) los valores de sus ancestros
    m√°s cercanos, para aplicarla se usa el valor inherit, si queremos evitarla podemos asignar otro valor o inicializar la propiedad en cuestion con el valor initial

*/
/*Selector Specificity: (1, 1, 1)*/
blockquote#cita-marco.cita-marco{
    background-color: lightsteelblue;
}
/*Selector Specificity: (0, 0, 1)*/
blockquote{
    background-color: burlywood;
}
/*Selector Specificity: (1, 0, 0)*/
#cita-marco{
    background-color: lightgreen;
}
/*Selector Specificity: (0, 1, 1)*/
blockquote.cita-marco{
    background-color:brown
}
/*Selector Specificity: (0, 1, 0)*/
.cita-marco{
    background-color: cornflowerblue;
}
/*Selector Specificity: (1, 0, 1)*/
blockquote#cita-marco{
    background-color: lightsalmon;
}

/*El mayor peso es el que queda en este caso el style en linea tiene un peso de 1000
        <blockquote id="cita-marco" class="cita-marco" style="background-color: violet;">
*/

/*en este caso el uso del !important donde rompe la especifidad */
.cita-marco{
    background-color: mediumaquamarine !important;
}

/* cuando hay dos !important aplicara al ultimo importa que especifica  ESTO ES UNA MALA PRACTICA*/
.cita-marco{
    background-color: moccasin !important;
    background-color: darkorange !important;
    font-size: 32px;
    border-style: dotted;
    border-color: red;
}

.cita-marco cite{
    background-color: pink;
    background-color: inherit;/*? permite heredar de cita marco */
    font-size: 24px;
    font-size: initial;
    border-style: inherit;
    border-color: inherit;
}